name: CD Pipeline

on:
  workflow_run:
    workflows: ["Build Docker image"]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to staging
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
          SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
          SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}

      - name: Upload Docker Compose File and Pull Docker Images
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_SSH_HOST }}
          username: ${{ secrets.STAGING_SSH_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            # Ensure Docker and Docker Compose are installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing Docker..."
              sudo apt-get update
              sudo apt-get install ca-certificates curl
              sudo install -m 0755 -d /etc/apt/keyrings
              sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc
              
              # Add the repository to Apt sources:
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt-get update

                sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

            sudo dpkg -i ./containerd.io_<version>_<arch>.deb \
            ./docker-ce_<version>_<arch>.deb \
            ./docker-ce-cli_<version>_<arch>.deb \
            ./docker-buildx-plugin_<version>_<arch>.deb \
            ./docker-compose-plugin_<version>_<arch>.deb
            else
              echo "Docker is already installed."
            fi


            # Check if Docker Compose is installed
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not found. Installing Docker Compose....
              
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            else
              echo "Docker is already installed."
            fi

            
            # Create or update Docker Compose file
            cat > docker-compose.yml <<EOF
            version: "3.7"

            services:
              api:
                image: rinkukunwarrao/project_backend:latest
                environment:
                  - CONNECTION_STRING=postgres://demo_user:demo_user@db/demo_db
                depends_on:
                  - db
                networks:
                  - network-backend
                  - network-frontend
            
              webapp:
                image: rinkukunwarrao/project_frontend:latest
                environment:
                  - API_URL=http://api:3001/data
                depends_on:
                  - api
                ports:
                  - "3000:3000"
                networks:
                  - network-frontend
            
              db:
                image: postgres:11.2-alpine
                environment:
                  POSTGRES_USER: demo_user
                  POSTGRES_PASSWORD: demo_user
                  POSTGRES_DB: demo_db
                volumes:
                  - ./init_sql_scripts/:/docker-entrypoint-initdb.d
                networks:
                  - network-backend
            
            networks:
              network-backend:
              network-frontend:
            EOF

            # Pull Docker images and manage containers
            sudo docker-compose down   # Stop and remove old containers
            sudo docker-compose pull  # Pull the latest images
            sudo docker-compose up -d # Start containers in detached mode

      - name: Slack Notification
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env: 
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL_T }}
          SLACK_CHANNEL: '#testing'
          SLACK_COLOR: '#008000'
          SLACK_MESSAGE: 'The build and deployment process has been completed.'
